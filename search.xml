<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/17/hello-world/"/>
      <url>/2021/11/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>On the Detection of Digital Face Manipulation</title>
      <link href="/2021/06/03/on-the-detection-of-digital-face-manipulation-2020-cvpr/"/>
      <url>/2021/06/03/on-the-detection-of-digital-face-manipulation-2020-cvpr/</url>
      
        <content type="html"><![CDATA[<h1 id="论文解读：On-the-Detection-of-Digital-Face-Manipulation（2020-CVPR"><a href="#论文解读：On-the-Detection-of-Digital-Face-Manipulation（2020-CVPR" class="headerlink" title="论文解读：On the Detection of Digital Face Manipulation（2020 CVPR)"></a>论文解读：On the Detection of Digital Face Manipulation（2020 CVPR)</h1><h2 id="一-创新点"><a href="#一-创新点" class="headerlink" title="一.创新点"></a>一.创新点</h2><ol><li>制作了一个综合的fakeface数据集，包括0.8M真实人脸和1.8M由不同方法生成的伪人脸。</li><li>提出一种新颖的基于注意力的层，用于提高分类性能并产生指示被操纵的面部区域的注意力图。</li><li>提出一种新的度量，称为IINC(Inverse Intersection Non-containment )，用于评估注意力图，产生比现有度量更一致的评估。</li></ol><h2 id="二-注意力机制"><a href="#二-注意力机制" class="headerlink" title="二.注意力机制"></a>二.注意力机制</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><ol><li>并行计算</li><li>考虑了序列的前后关系</li><li>参数共享</li></ol><p>更多参考：<a href="https://blog.csdn.net/xys430381_1/article/details/89323444?ops_request_misc=%7B%22request_id%22:%22162237886216780269816338%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=162237886216780269816338&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-1-89323444.pc_search_result_cache&utm_term=%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6&spm=1018.2226.3001.4187">综述—图像处理中的注意力机制_xys430381_1的专栏-CSDN博客_图像注意力机制</a></p><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h3><ol><li>空间域（在H*W方向上）（本文采用）</li><li>通道域（在Channel方向上）</li><li>混合域</li></ol><h2 id="三、论文结构"><a href="#三、论文结构" class="headerlink" title="三、论文结构"></a>三、论文结构</h2><p><img src="D:\School\School\DeepLearning\facefake\code\FFD_CVPR2020-master\FFD_CVPR2020-master\readme_fig.png" alt="论文结构"></p><h3 id="1-主干网络：Xception"><a href="#1-主干网络：Xception" class="headerlink" title="1.主干网络：Xception"></a>1.主干网络：Xception</h3><p><img src="D:\School\School\DeepLearning\facefake\code\FFD_CVPR2020-master\FFD_CVPR2020-master\Xception.png" alt="Xception基本结构"></p><p>Xception是一种主干网络(Backbone)，在许多模型中放置在网络前端，用来提取特征图F。Xception包含三个主要模块：Entry flow, Middle flow 和 Exit flow。</p><ol><li>Entry flow：这一模块包括最开始的两层普通卷积和三个可分离卷积块，其中每个可分离卷积块又包括两次可分离卷积，且第一次可分离卷积需要对Channel数调整，第二次可分离卷积后需要残差块处理。</li><li>Middle flow：这一模块为一个可分离卷积块重复八次，每个卷积快包括三次可分离卷积。</li><li>Exit flow：这一模块包括一个可分离卷积块和后续收尾操作：2*可分离卷积，全局平均池化，全连接等。</li><li>注意力层：论文中提到：“We convert Xception-Net into our model by inserting the attention-based layer between Block 4 and Block 5 of the middle flow, and then fine-tune on DFFD training set.”即注意力层在Middle flow中第4个模块和第5个模块之间。</li></ol><p>代码实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SeparableConv2d</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#可分离卷积(整合了depthwise和pointwose卷积)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c_in<span class="token punctuation">,</span> c_out<span class="token punctuation">,</span> ks<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dilation<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SeparableConv2d<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>c_in<span class="token punctuation">,</span> c_in<span class="token punctuation">,</span> ks<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> padding<span class="token punctuation">,</span> dilation<span class="token punctuation">,</span> groups<span class="token operator">=</span>c_in<span class="token punctuation">,</span> bias<span class="token operator">=</span>bias<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pointwise <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>c_in<span class="token punctuation">,</span> c_out<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span>bias<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>c<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pointwise<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">class</span> <span class="token class-name">Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#基本块</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c_in<span class="token punctuation">,</span> c_out<span class="token punctuation">,</span> reps<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        c_in:输入层channel数        c_out:输出层channel数        reps:一个Block中SeparableConv2d块的数量        stride:卷积步长        start_with_relu:是否为网络中的第一个Block        grow_first：是否为网络中的最后一个Block        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Block<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>skip <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>skip_bn <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> c_out <span class="token operator">!=</span> c_in <span class="token keyword">or</span> stride <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 是否加入残差模块的条件判断</span>            self<span class="token punctuation">.</span>skip <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>c_in<span class="token punctuation">,</span> c_out<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>skip_bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>c_out<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        rep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        c <span class="token operator">=</span> c_in        <span class="token comment"># 如果是Block中的第一次卷积，就需要调整Channel数</span>        <span class="token keyword">if</span> grow_first<span class="token punctuation">:</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>relu<span class="token punctuation">)</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>SeparableConv2d<span class="token punctuation">(</span>c_in<span class="token punctuation">,</span> c_out<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>c_out<span class="token punctuation">)</span><span class="token punctuation">)</span>            c <span class="token operator">=</span> c_out        <span class="token comment"># 中间过程的卷积Channel数不变</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>reps <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>relu<span class="token punctuation">)</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>SeparableConv2d<span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 只有Exit flow中卷积块的最后一次卷积，Channel数扩充</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> grow_first<span class="token punctuation">:</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>relu<span class="token punctuation">)</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>SeparableConv2d<span class="token punctuation">(</span>c_in<span class="token punctuation">,</span> c_out<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>c_out<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 如果是第一个Block中的第一个卷积块,就需要去掉最开始的relu层，因为已经做过了</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> start_with_relu<span class="token punctuation">:</span>            rep <span class="token operator">=</span> rep<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            rep<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> stride <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            rep<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rep <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>rep<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inp<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>rep<span class="token punctuation">(</span>inp<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>skip <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> self<span class="token punctuation">.</span>skip<span class="token punctuation">(</span>inp<span class="token punctuation">)</span>            y <span class="token operator">=</span> self<span class="token punctuation">.</span>skip_bn<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> inp        x <span class="token operator">+=</span> y        <span class="token keyword">return</span> x    <span class="token comment"># 主干网络(注意力层也夹在其中)</span><span class="token keyword">class</span> <span class="token class-name">Xception</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""  Xception optimized for the ImageNet dataset, as specified in  https://arxiv.org/pdf/1610.02357.pdf  """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> maptype<span class="token punctuation">,</span> templates<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Xception<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_classes <span class="token operator">=</span> num_classes                <span class="token comment"># Entry flow</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block1 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block2 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block3 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                <span class="token comment"># Middle flow</span>        self<span class="token punctuation">.</span>block4 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block5 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block6 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block7 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block8 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block9 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block10 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block11 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                <span class="token comment"># Exit flow</span>        self<span class="token punctuation">.</span>block12 <span class="token operator">=</span> Block<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> SeparableConv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1536</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">1536</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv4 <span class="token operator">=</span> SeparableConv2d<span class="token punctuation">(</span><span class="token number">1536</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token keyword">if</span> maptype <span class="token operator">==</span> <span class="token string">'none'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> maptype <span class="token operator">==</span> <span class="token string">'reg'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token operator">=</span> RegressionMap<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> maptype <span class="token operator">==</span> <span class="token string">'tmp'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token operator">=</span> TemplateMap<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">,</span> templates<span class="token punctuation">)</span>        <span class="token keyword">elif</span> maptype <span class="token operator">==</span> <span class="token string">'pca_tmp'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token operator">=</span> PCATemplateMap<span class="token punctuation">(</span><span class="token number">728</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Unknown map type: `&#123;0&#125;`'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>maptype<span class="token punctuation">)</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">features</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># Entry flow</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token comment"># Middle flow</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block5<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block6<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block7<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># attention-based layer</span>        mask<span class="token punctuation">,</span> vec <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> x <span class="token operator">*</span> mask        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block8<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block9<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block10<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block11<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token comment"># Exit flow</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>block12<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> vec    <span class="token keyword">def</span> <span class="token function">logits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> features<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>features<span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>adaptive_avg_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>last_linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> vec <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>logits<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> vec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-注意力层"><a href="#2-注意力层" class="headerlink" title="2.注意力层"></a>2.注意力层</h3><p><img src="D:\School\School\DeepLearning\facefake\code\FFD_CVPR2020-master\FFD_CVPR2020-master\readme_fig.png" alt="论文结构"></p><p>论文中给出了两种计算注意力层的方法，用于相互比较：1. MAM Map    2.Reg.Map。</p><h4 id="1-MAM-Map"><a href="#1-MAM-Map" class="headerlink" title="1. MAM Map"></a>1. MAM Map</h4><p>全称Manipulation Appearance Model，是作者自己提出的一个结构。该结构包括一个可分离卷积块和一个全连接，以此来估计各个区域的权重$\alpha$。此时，$M_{att}=\overline{M}+A·\alpha$，其中$\overline{M}$和$A$通过主成分分析(PCA)提取，将在后文介绍。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># MAM Map</span><span class="token keyword">class</span> <span class="token class-name">TemplateMap</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c_in<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>TemplateMap<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> Block<span class="token punctuation">(</span>c_in<span class="token punctuation">,</span> <span class="token number">364</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> start_with_relu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> grow_first<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>l <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">364</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>templates <span class="token operator">=</span> templates    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 可分离卷积</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>c<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>v<span class="token punctuation">)</span>        <span class="token comment"># 适应性平均池化</span>        v <span class="token operator">=</span> F<span class="token punctuation">.</span>adaptive_avg_pool2d<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        v <span class="token operator">=</span> v<span class="token punctuation">.</span>view<span class="token punctuation">(</span>v<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># 全连接</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>l<span class="token punctuation">(</span>v<span class="token punctuation">)</span>        mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>v<span class="token punctuation">,</span> self<span class="token punctuation">.</span>templates<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">361</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mask <span class="token operator">=</span> mask<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> mask<span class="token punctuation">,</span> v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Reg-Map"><a href="#2-Reg-Map" class="headerlink" title="2.Reg. Map"></a>2.Reg. Map</h4><p>这里采用Direct regression，通过一个可分离卷积和$sigmoid$函数可以得到。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Reg. Map</span><span class="token keyword">class</span> <span class="token class-name">RegressionMap</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> c_in<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>RegressionMap<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> SeparableConv2d<span class="token punctuation">(</span>c_in<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>s <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 可分离卷积</span>        mask <span class="token operator">=</span> self<span class="token punctuation">.</span>c<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># sigmoid</span>        mask <span class="token operator">=</span> self<span class="token punctuation">.</span>s<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>        <span class="token keyword">return</span> mask<span class="token punctuation">,</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-PCA"><a href="#3-PCA" class="headerlink" title="3.PCA"></a>3.PCA</h4><p>在上文中，$M_{att}=\overline{M}+A·\alpha$，其中$\overline{M}$和$A$通过主成分分析(PCA)提取。其数据来源于FaceApp计算的100个真实的manipulation masks。其提取结果如下(10个主成分)：</p><p><img src="D:\School\School\DeepLearning\facefake\code\FFD_CVPR2020-master\FFD_CVPR2020-master\PCA.png" alt="PCA"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># PCA</span><span class="token keyword">class</span> <span class="token class-name">PCATemplateMap</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>PCATemplateMap<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>templates <span class="token operator">=</span> templates    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        fe <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        fe <span class="token operator">=</span> torch<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>fe<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 均值</span>        mu <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>fe<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        fea_diff <span class="token operator">=</span> fe <span class="token operator">-</span> mu        cov_fea <span class="token operator">=</span> torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>fea_diff<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>fea_diff<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        B <span class="token operator">=</span> self<span class="token punctuation">.</span>templates<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">361</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        D <span class="token operator">=</span> torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>B<span class="token punctuation">,</span> cov_fea<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 特征值和特征向量</span>        eigen_value<span class="token punctuation">,</span> eigen_vector <span class="token operator">=</span> D<span class="token punctuation">.</span>symeig<span class="token punctuation">(</span>eigenvectors<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        eigen <span class="token operator">=</span> torch<span class="token punctuation">.</span>index_select<span class="token punctuation">(</span>eigen_vector<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>        v <span class="token operator">=</span> eigen<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>v<span class="token punctuation">,</span> self<span class="token punctuation">.</span>templates<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">361</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mask <span class="token operator">=</span> mask<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> mask<span class="token punctuation">,</span> v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-损失函数"><a href="#3-损失函数" class="headerlink" title="3.损失函数"></a>3.损失函数</h3><p>样本共分为三种场景：supervised, weakly supervised 和 unsupervised。</p><p>但总的损失函数始终为：$\frak L=\frak L_{\rm classifier} +\lambda \ast \frak L_{\rm map}$</p><p>因此，损失函数也分三种情况讨论。</p><p>supervised: $\quad \frak L_{\rm map}=|| \rm M_{\it att}-\rm M_{\it gt}||$</p><p>$\rm M_{\it gt}$是真实图像，用全0矩阵表示。对于完全伪造的图像，则用全1矩阵表示。</p><p>weakly supervised:$\quad \frak L_{\rm map}=\begin{cases}|\rm Sigmoid(M_{\it att})-0|, &amp; \rm if , real    \|\rm max(Sigmoid(M_{\it att}))-0.75|    &amp;\rm if, fake\end{cases}$</p><p>对于真实图像，这种损失可以使注意力机制对其不产生激活。对于伪造图像，其损失会保持足够大。</p><p>unsupervised：$\quad \lambda_m=0$</p><p>此时总损失仅通过分类损失得到。</p><h2 id="四、其他细节"><a href="#四、其他细节" class="headerlink" title="四、其他细节"></a>四、其他细节</h2><h3 id="1-数据集"><a href="#1-数据集" class="headerlink" title="1.数据集"></a>1.数据集</h3><p>论文构造了一个数据集，包括真实图像和虚假图像。</p><p>真实图像主要通过FFHQ和CelebA数据集获得。</p><p>虚假图像的来源有以下几种：</p><ol><li>身份交换和表情修改：FaceBook++</li><li>属性操作：通过StarGAN训练FaceApp的图像得到</li><li>全脸合成：通过与预训练的PGGAN和StyleGAN得到</li></ol><h3 id="2-新的度量标准IINC"><a href="#2-新的度量标准IINC" class="headerlink" title="2.新的度量标准IINC"></a>2.新的度量标准IINC</h3><p>“IINC improves upon other metrics by measuring the non-overlap ratio of both maps, rather than their combined overlap, as in IoU. “即IINC相比于传统的IoU,除了考虑重叠的部分之外，还考虑了非重叠的部分。<br>$$<br>IINC=\frac{1}{3-|\rm U|}\ast \begin{cases}<br>0 &amp;\rm if ; \overline{M_{\it gt}}=0 ;  and ; \overline{M_{\it att}}=0    \<br>1 &amp;\rm if ; \overline{M_{\it gt}}=0 ;  xor ; \overline{M_{\it gt}}=0    \<br>2-\frac{|\rm I|}{\rm M_{\it att}}-\frac{|\rm I|}{\rm M_{\it gt}}    &amp;otherwise<br>\end{cases}<br>$$<br>其中，U和I的含义与IoU中的定义相同，即Union和Intersection。</p><p><img src="D:\School\School\DeepLearning\facefake\code\FFD_CVPR2020-master\FFD_CVPR2020-master\IINC.png" alt="IINC"></p><h2 id="五、论文链接"><a href="#五、论文链接" class="headerlink" title="五、论文链接"></a>五、论文链接</h2><p><a href="https://openaccess.thecvf.com/content_CVPR_2020/papers/Dang_On_the_Detection_of_Digital_Face_Manipulation_CVPR_2020_paper.pdf">pdf</a></p><p><a href="https://github.com/JStehouwer/FFD_CVPR2020">code</a></p><p><a href="http://cvlab.cse.msu.edu/dffd-dataset.html">dataset</a></p><blockquote><p>2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fakeface </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex常见数学符号与公式格式</title>
      <link href="/2021/06/01/latex-signals/"/>
      <url>/2021/06/01/latex-signals/</url>
      
        <content type="html"><![CDATA[<h1 id="Latex常见数学符号与公式格式"><a href="#Latex常见数学符号与公式格式" class="headerlink" title="Latex常见数学符号与公式格式"></a>Latex常见数学符号与公式格式</h1><h2 id="一、常见数学符号"><a href="#一、常见数学符号" class="headerlink" title="一、常见数学符号"></a>一、常见数学符号</h2><h3 id="1-字母修饰符"><a href="#1-字母修饰符" class="headerlink" title="1.字母修饰符"></a>1.字母修饰符</h3><p>$$<br>\hat{a}     \qquad  \check{a}    \qquad   \tilde{a}    \qquad    \acute{a}    \<br>\grave{a}    \qquad     \dot{a}        \qquad    \ddot{a}    \qquad    \breve{a}    \<br>\bar{a}        \qquad     \vec{a}        \qquad    \widehat{a}    \qquad    \widetilde{a}<br>$$</p><h3 id="2-小写希腊字母"><a href="#2-小写希腊字母" class="headerlink" title="2.小写希腊字母"></a>2.小写希腊字母</h3><p>$$<br>\alpha        \qquad    \beta    \qquad    \gamma        \qquad    \delta    \qquad    \epsilon    \<br>\varepsilon    \qquad    \zeta    \qquad    \eta        \qquad    \theta    \qquad    \vartheta    \<br>\iota        \qquad    \kappa    \qquad    \lambda        \qquad    \mu        \qquad    \nu            \<br>\xi            \qquad    o        \qquad    \pi            \qquad    \varpi    \qquad    \rho        \<br>\varrho        \qquad    \sigma    \qquad    \varsigma    \qquad    \tau    \qquad    \upsilon    \<br>\phi        \qquad    \varphi    \qquad    \chi        \qquad    \psi    \qquad    \omega<br>$$</p><h3 id="3-大写希腊字母"><a href="#3-大写希腊字母" class="headerlink" title="3.大写希腊字母"></a>3.大写希腊字母</h3><p>$$<br>\Gamma    \qquad    \Lambda    \qquad    \Sigma    \qquad    \Psi    \<br>\Delta    \qquad    \Xi        \qquad    \Upsilon\qquad    \Omega    \<br>\Theta    \qquad    \Pi        \qquad    \Phi<br>$$</p><h3 id="4-关系符号"><a href="#4-关系符号" class="headerlink" title="4.关系符号"></a>4.关系符号</h3><p>$$<br>&lt;        \qquad    &gt;        \qquad    =        \qquad        \le        \qquad        \ge        \qquad        \equiv        \<br>\ll        \qquad    \gg        \qquad    \doteq    \qquad        \prec    \qquad        \succ    \qquad        \sim        \<br>\preceq    \qquad    \succeq    \qquad    \simeq    \qquad        \approx    \qquad        \cong    \qquad        \ne            \<br>\lessdot\qquad    \gtrdot    \qquad    \Doteq    \qquad        \leqslant\qquad        \geqslant\qquad        \leqq        \<br>\geqq    \qquad    \lll    \qquad    \ggg    \qquad        \circeq    \qquad        \triangleq\qquad    \thicksim    \<br>\thickapprox    \qquad    \vDash    \qquad    \vdash    \qquad    \Vvdash    \qquad    \varpropto\qquad    \nmid<br>$$</p><h3 id="5-逻辑符号"><a href="#5-逻辑符号" class="headerlink" title="5.逻辑符号"></a>5.逻辑符号</h3><p>$$<br>\subset        \qquad        \supset        \qquad        \subseteq        \qquad        \supseteq        \<br>\in            \qquad        \ni            \qquad        \notin            \qquad        \mid            \<br>\parallel    \qquad        \perp        \qquad        \bowtie            \qquad        :                \<br>\cup        \qquad        \cap        \qquad        \bigcup            \qquad        \bigcap            \<br>\vee        \qquad        \wedge        \qquad        \bigvee            \qquad        \bigwedge        \<br>\circ        \qquad        \bullet        \qquad        \oplus            \qquad        \ominus            \<br>\bigoplus    \qquad        \bigotimes    \qquad        \bigodot        \qquad        \bigcirc        \<br>\because    \qquad        \therefore    \qquad        \forall            \qquad        \exists<br>$$</p><h3 id="6-运算符号和函数"><a href="#6-运算符号和函数" class="headerlink" title="6.运算符号和函数"></a>6.运算符号和函数</h3><p>$$</p><ul><li><pre><code>       \qquad        -            \qquad        \pm            \qquad        \mp        \\</code></pre>\cdot        \qquad        \div        \qquad        \times        \qquad        \star    \<br>\ast        \qquad        \triangleleft    \qquad    \triangleright    \qquad    \int    \<br>\oint        \qquad        \sum        \qquad        \prod        \qquad        \coprod        \<br>\dots        \qquad        \cdots        \qquad        \vdots        \qquad        \ddots        \<br>\hbar        \qquad        \imath        \qquad        \jmath        \qquad        \ell        \<br>‘            \qquad        \prime        \qquad        \partial    \qquad        \infty        \<br>\angle        \qquad        \sqrt{2}    \qquad        \Re            \qquad        \surd<br>$$</li></ul><h2 id="二、公式格式"><a href="#二、公式格式" class="headerlink" title="二、公式格式"></a>二、公式格式</h2><h3 id="1-插入公式"><a href="#1-插入公式" class="headerlink" title="1.插入公式"></a>1.插入公式</h3><p>左对齐（行中）公式：$A+B=C$</p><p>居中对齐（行间）公式：<br>$$<br>%这是一个注释<br>A+B=C<br>\tag{2-1}<br>%公式可以编号<br>$$</p><h3 id="2-对齐"><a href="#2-对齐" class="headerlink" title="2.对齐"></a>2.对齐</h3><p>$$<br>\begin{aligned}<br>f(x)&amp;=2x+1\<br>&amp;=2+1\<br>&amp;=3<br>\end{aligned}<br>$$</p><h3 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h3><p>$$<br>\rm D    \qquad    \it    D    \qquad        \mathit{D}        \qquad        \Bbb{D}        \<br>\bf D    \qquad    \frak D    \qquad        \boldsymbol{D}<br>$$</p><h3 id="4-上下标"><a href="#4-上下标" class="headerlink" title="4.上下标"></a>4.上下标</h3><p>$$<br>f(x)=x_1^2+x_2^2    \<br>x^{y_1+y_2}=x^{y_1}\cdot x^{y_2}<br>$$</p><h3 id="5-括号"><a href="#5-括号" class="headerlink" title="5.括号"></a>5.括号</h3><p>$$<br>f\left(<br>   \left[<br>     \frac{<br>       1+\left{x,y\right}<br>     }{<br>       \left(<br>          \frac{x}{y}+\frac{y}{x}<br>       \right)<br>       \left(u+1\right)<br>     }+a<br>   \right]^{3/2}<br>\right)<br>$$</p><h3 id="6-分式、根式、对数、最值"><a href="#6-分式、根式、对数、最值" class="headerlink" title="6.分式、根式、对数、最值"></a>6.分式、根式、对数、最值</h3><p>$$<br>\frac{\frac{a}{b}}{y^2_1+1}    \<br>\sqrt[n]{x+y}        \<br>\log_2{x}    \<br>\min_{1\le i\le x}{x^2_i}    \<br>||x||<em>\infty=\max</em>{1\leq i\leq n}{|x_i|}<br>$$</p><h3 id="7-方程组和分段函数"><a href="#7-方程组和分段函数" class="headerlink" title="7.方程组和分段函数"></a>7.方程组和分段函数</h3><p>$$<br>\left{<br>\begin{aligned}<br>a+b&amp;=2 \<br>a-b+c&amp;=4 \<br>\end{aligned}<br>\right.<br>\<br>y=\begin{cases}<br>x+1    &amp;x\le 0\<br>x^2    &amp;x&gt;0\<br>\end{cases}<br>$$</p><h3 id="8-累加、累乘"><a href="#8-累加、累乘" class="headerlink" title="8.累加、累乘"></a>8.累加、累乘</h3><p>$$<br>\sum_{1 \le i \le n}^{i}{\frac{1}{i^2}} \qquad and    \qquad    \prod_{1 \le i \le n}^{i}{\frac{1}{i^2}} \qquad and \qquad<br>\bigcup_{1 \le i \le n}^{i}{R}<br>$$</p><h3 id="9-导数、积分"><a href="#9-导数、积分" class="headerlink" title="9.导数、积分"></a>9.导数、积分</h3><p>$$<br>{\rm d}x    \<br>\frac{\partial y}{\partial x}    \<br>\nabla f(x)    \<br>\int_0^1{x^2 ,{\rm d}x}<br>$$</p><h3 id="10-矩阵"><a href="#10-矩阵" class="headerlink" title="10.矩阵"></a>10.矩阵</h3><p>$$<br>\left[<br>\begin{matrix}<br>1 &amp; x &amp; x^2 \<br>1 &amp; y &amp; y^2 \<br>1 &amp; z &amp; z^2 \<br>\end{matrix}<br>\right]<br>$$</p><h3 id="11-表格"><a href="#11-表格" class="headerlink" title="11.表格"></a>11.表格</h3><p>$$<br>\begin{array}{c}<br>\hline<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \<br>\hline<br>1 &amp; 0.24 &amp; 1 &amp; 125 \<br>2 &amp; -1 &amp; 189 &amp; -8 \<br>3 &amp; -20 &amp; 2000 &amp; 1+10i \<br>\hline<br>\end{array}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
